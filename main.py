import streamlit as st
from PIL import Image
from model.predictor import predict_image as predict_image_inat
from rapidfuzz import process, fuzz
import os
import time


# –ó–∞–≥—Ä—É–∑–∫–∞ ImageNet –º–µ—Ç–æ–∫ —Å –∫—ç—à–µ–º
@st.cache_resource
def load_categories():
    import urllib.request

    url = (
        "https://raw.githubusercontent.com/pytorch/hub/master/"
        "imagenet_classes.txt"
    )
    with urllib.request.urlopen(url) as f:
        categories = [line.strip().decode("utf-8") for line in f]
    return categories


categories = load_categories()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="ZooVision", layout="centered")
st.title("üêæ ZooVision ‚Äî –∫—Ç–æ –ø–µ—Ä–µ–¥ –Ω–∞–º–∏?")

st.markdown(
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ‚Äî –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥.
    –í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –æ–±—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ üéØ
    """
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
for key in [
    "results",
    "feedback_expanded",
    "correction_confirmed",
    "user_text",
    "selected_correction",
]:
    if key not in st.session_state:
        st.session_state[key] = (
            False if "confirmed" in key or "expanded" in key else ""
        )

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader(
    "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"]
)

if uploaded_file:
    image = Image.open(uploaded_file).convert("RGB")
    img_width, img_height = image.size

    # –°–±—Ä–æ—Å –æ–±—Ä–µ–∑–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ
    current_filename = uploaded_file.name
    if "last_filename" not in st.session_state:
        st.session_state.last_filename = ""
    if current_filename != st.session_state.last_filename:
        st.session_state.left = 0
        st.session_state.right = img_width
        st.session_state.top = 0
        st.session_state.bottom = img_height
        st.session_state.last_filename = current_filename
        st.session_state.results = None  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        st.session_state.feedback_expanded = False
        st.session_state.correction_confirmed = False
        st.session_state.user_text = ""
        st.session_state.selected_correction = ""

    st.image(
        image, caption="üñº –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True
    )

    image_for_prediction = image

    # –û–±—Ä–µ–∑–∫–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é
    use_crop = st.checkbox("‚úÇÔ∏è –û–±—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é?", value=False)

    if use_crop:
        st.subheader("üìê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–µ–∑–∫–∏")

        left = st.session_state.get("left", 0)
        right = st.session_state.get("right", img_width)
        top = st.session_state.get("top", 0)
        bottom = st.session_state.get("bottom", img_height)

        col1, col2 = st.columns(2)
        with col1:
            left = st.slider("–°–ª–µ–≤–∞", 0, img_width - 1, left)
            right = st.slider("–°–ø—Ä–∞–≤–∞", left + 1, img_width, right)
        with col2:
            top = st.slider("–°–≤–µ—Ä—Ö—É", 0, img_height - 1, top)
            bottom = st.slider("–°–Ω–∏–∑—É", top + 1, img_height, bottom)

        st.session_state.left = left
        st.session_state.right = right
        st.session_state.top = top
        st.session_state.bottom = bottom

        cropped_image = image.crop((left, top, right, bottom))
        st.image(
            cropped_image,
            caption="üîç –û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            use_container_width=True,
        )
        image_for_prediction = cropped_image

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if st.button("üîç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ —ç—Ç–æ"):
        progress = st.progress(0)
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):

            time.sleep(0.2)
            progress.progress(20)

            time.sleep(0.3)
            progress.progress(40)

            time.sleep(0.1)
            st.session_state.results = predict_image_inat(image_for_prediction)
            progress.progress(80)

            time.sleep(0.1)
            progress.progress(100)

        progress.empty()

        # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –ø—Ä–∏ –Ω–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ
        st.session_state.feedback_expanded = False
        st.session_state.correction_confirmed = False
        st.session_state.user_text = ""
        st.session_state.selected_correction = ""

    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –±–ª–æ–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if st.session_state.results:
        results = st.session_state.results

        filtered_results = [
            (label, score) for label, score in results if score > 0.01
        ]

        st.subheader("üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        if filtered_results:
            main_label, main_score = filtered_results[0]
            st.success(
                f"‚úÖ –≠—Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ: **{main_label}** ({main_score:.2%})"
            )

            if len(filtered_results) > 1:
                st.markdown("### –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
                for label, score in filtered_results[1:]:
                    st.write(f"‚Ä¢ {label} ‚Äî {score:.2%}")
        else:
            st.warning(
                "–ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
            )

        # –ë–ª–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if not st.session_state.feedback_expanded:
            if st.button("‚ùå –ñ–∏–≤–æ—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ"):
                st.session_state.feedback_expanded = True

        if st.session_state.feedback_expanded:
            if not st.session_state.correction_confirmed:
                st.session_state.user_text = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ",
                    value=st.session_state.user_text,
                )

                if st.session_state.user_text:
                    options_for_feedback = [
                        label for label, score in filtered_results
                    ]

                    matches = process.extract(
                        st.session_state.user_text,
                        options_for_feedback,
                        scorer=fuzz.token_sort_ratio,
                        limit=3,
                    )
                    st.write("üîé –ù–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
                    for label, score, _ in matches:
                        st.write(f"- **{label}** ({score:.1f}%)")

                    options = [label for label, score, _ in matches]
                    selected = st.radio(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:", options
                    )

                    # –ö–Ω–æ–ø–∫–∞ —Å on_click –∏ disabled
                    def confirm_correction():
                        st.session_state.correction_confirmed = True
                        st.session_state.selected_correction = selected

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        label_folder = (
                            f"corrections/{selected.replace(' ', '_')}"
                        )
                        os.makedirs(label_folder, exist_ok=True)

                        base_name = os.path.splitext(uploaded_file.name)[0]
                        new_filename = f"{base_name}_corrected.jpg"
                        save_path = os.path.join(label_folder, new_filename)

                        with open(save_path, "wb") as f:
                            f.write(uploaded_file.getbuffer())

                    st.button(
                        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å",
                        on_click=confirm_correction,
                        disabled=st.session_state.correction_confirmed,
                    )

            else:
                st.success(
                    f"–°–ø–∞—Å–∏–±–æ! –§–æ—Ç–æ —É—á—Ç–µ–Ω–æ –∫–∞–∫ "
                    f"'{st.session_state.selected_correction}'"
                )
