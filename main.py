import streamlit as st
from PIL import Image
from model.predictor import predict_image as predict_image_inat

st.set_page_config(page_title="ZooVision", layout="centered")
st.title("üêæ ZooVision ‚Äî –∫—Ç–æ –ø–µ—Ä–µ–¥ –Ω–∞–º–∏?")

st.markdown(
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ‚Äî –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥.
    –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –æ–±—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ üéØ
    """
)

uploaded_file = st.file_uploader("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])

if uploaded_file:
    image = Image.open(uploaded_file).convert("RGB")
    img_width, img_height = image.size

    # --- –°–±—Ä–æ—Å –æ–±—Ä–µ–∑–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ ---
    current_filename = uploaded_file.name
    if "last_filename" not in st.session_state:
        st.session_state.last_filename = ""
    if current_filename != st.session_state.last_filename:
        st.session_state.left = 0
        st.session_state.right = img_width
        st.session_state.top = 0
        st.session_state.bottom = img_height
        st.session_state.last_filename = current_filename

    st.image(image, caption="üñº –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

    # --- –í–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∫–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é ---
    use_crop = st.checkbox("‚úÇÔ∏è –û–±—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é?", value=False)

    if use_crop:
        st.subheader("üìê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–µ–∑–∫–∏")

        # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        left = st.session_state.get("left", 0)
        right = st.session_state.get("right", img_width)
        top = st.session_state.get("top", 0)
        bottom = st.session_state.get("bottom", img_height)

        # –°–ª–∞–π–¥–µ—Ä—ã
        col1, col2 = st.columns(2)
        with col1:
            left = st.slider("–°–ª–µ–≤–∞", 0, img_width - 1, left)
            right = st.slider("–°–ø—Ä–∞–≤–∞", left + 1, img_width, right)
        with col2:
            top = st.slider("–°–≤–µ—Ä—Ö—É", 0, img_height - 1, top)
            bottom = st.slider("–°–Ω–∏–∑—É", top + 1, img_height, bottom)

        # –û–±–Ω–æ–≤–ª—è–µ–º session_state
        st.session_state.left = left
        st.session_state.right = right
        st.session_state.top = top
        st.session_state.bottom = bottom

        # –ö—Ä–æ–ø –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        cropped_image = image.crop((left, top, right, bottom))
        st.image(cropped_image, caption="üîç –û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
        image_for_prediction = cropped_image
    else:
        image_for_prediction = image

    # --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ---
    if st.button("üîç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ —ç—Ç–æ"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
            results = predict_image_inat(image_for_prediction)

        # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–∞–±—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π ---
        filtered_results = [(label, score) for label, score in results if score > 0.01]

        st.subheader("üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        if filtered_results:
            main_label, main_score = filtered_results[0]
            st.success(f"‚úÖ –≠—Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ: **{main_label}** ({main_score:.2%})")

            if len(filtered_results) > 1:
                st.markdown("### –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
                for label, score in filtered_results[1:]:
                    st.write(f"‚Ä¢ {label} ‚Äî {score:.2%}")
        else:
            st.warning("–ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")